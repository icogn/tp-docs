"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2064],{8015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>D,contentTitle:()=>I,default:()=>L,frontMatter:()=>$,metadata:()=>j,toc:()=>F});var a=n(7462),l=n(7294),r=n(3905),o=n(9960),i=n(7113);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t,n){return e>t?t:e<n?n:e}function d(e){if(!e.startsWith("#")){const t=document.createElement("canvas").getContext("2d");if(!t)throw new Error("2d context not supported or canvas already initialized");return t.fillStyle=e,t.fillStyle}return 4===e.length||5===e.length?e=e.split("").map(((e,t)=>t?e+e:"#")).join(""):7===e.length||9===e.length?e:"#000000"}function p(e){e=e.slice(1);const t=parseInt(e.slice(0,2),16),n=parseInt(e.slice(2,4),16),a=parseInt(e.slice(4,6),16);let l=parseInt(e.slice(6,8),16)||void 0;return l&&(l/=255),{r:t,g:n,b:a,a:l}}function m({r:e,g:t,b:n,a:a}){e/=255,t/=255,n/=255;const l=Math.max(e,t,n),r=l-Math.min(e,t,n);return{h:r?60*(l===e?(t-n)/r+(t<n?6:0):l===t?2+(n-e)/r:4+(e-t)/r):0,s:l?r/l*100:0,v:100*l,a:a}}function g({r:e,g:t,b:n,a:a}){return`#${[e,t,n,a].map(((e,t)=>void 0!==e?(t<3?e:Math.round(255*e)).toString(16).padStart(2,"0"):"")).join("")}`}function f(e,t){let n=d("#121212"),a=p(n),l=m(a);return"hex"===e?(n=d(t),a=p(n),l=m(a)):"rgb"===e?(a=t,n=g(a),l=m(a)):"hsv"===e&&(l=t,a=function({h:e,s:t,v:n,a:a}){const l=~~(e/60),r=e/60-l,o=(n/=100)*(1-(t/=100)),i=n*(1-t*r),s=n*(1-t*(1-r)),h=l%6;return{r:Math.round(255*[n,i,o,o,s,n][h]),g:Math.round(255*[s,n,n,i,o,o][h]),b:Math.round(255*[o,o,s,n,n,i][h]),a:a}}(l),n=g(a)),{hex:n,rgb:a,hsv:l}}const b=({className:e,style:t,onChange:n,children:a})=>{const r=(0,l.useRef)(null),o=(e,t)=>{if(r.current){const{current:a}=r,{width:l,height:o,left:i,top:s}=a.getBoundingClientRect(),h=c(e.clientX-i,l,0),u=c(e.clientY-s,o,0);n({x:h,y:u}),t&&n({x:h,y:u,complete:!0})}};return l.createElement("div",{ref:r,className:e,style:t,onMouseDown:e=>{if(0!==e.button)return;o(e);const t=e=>{o(e)},n=e=>{document.removeEventListener("mousemove",t,!1),document.removeEventListener("mouseup",n,!1),o(e,!0)};document.addEventListener("mousemove",t,!1),document.addEventListener("mouseup",n,!1)}},a)},k=({width:e,color:t,onChange:n,onChangeComplete:a})=>{const r=(0,l.useMemo)((()=>{var n;const a=function(e,t){return e*t}(null!==(n=t.hsv.a)&&void 0!==n?n:1,e);return a}),[t.hsv.a,e]),o=(0,l.useMemo)((()=>`${t.rgb.r}, ${t.rgb.g}, ${t.rgb.b}`),[t.rgb]),i=(0,l.useMemo)((()=>{var e;return`${o}, ${null!==(e=t.rgb.a)&&void 0!==e?e:1}`}),[o,t.rgb.a]),s=(0,l.useMemo)((()=>-r-2),[r]);return l.createElement(b,{className:"rcp-alpha",onChange:({x:l,complete:r})=>{const o=f("hsv",h(h({},t.hsv),{},{a:l/e}));n(o),r&&a&&a(o)},style:{background:`linear-gradient(to right, rgba(${o}, 0), rgba(${o}, 1)) top left / auto auto,\n              conic-gradient(#666 0.25turn, #999 0.25turn 0.5turn, #666 0.5turn 0.75turn, #999 0.75turn) top left / 12px 12px\n              repeat`}},l.createElement("div",{className:"rcp-alpha-cursor",style:{left:r,background:`linear-gradient(to right, rgba(${i}), rgba(${i})) top left / auto auto,\n                conic-gradient(#666 0.25turn, #999 0.25turn 0.5turn, #666 0.5turn 0.75turn, #999 0.75turn) ${s}px 2px / 12px 12px\n                repeat`}}))},w=({width:e,height:t,color:n,onChange:a,onChangeComplete:r})=>{const o=(0,l.useMemo)((()=>{const[a,l]=function(e,t,n){const{s:a,v:l}=e.hsv;return[a/100*t,(100-l)/100*n]}(n,e,t);return{x:a,y:l}}),[n,e,t]);return l.createElement(b,{className:"rcp-saturation",style:{height:t,backgroundColor:`hsl(${n.hsv.h}, 100%, 50%)`},onChange:({x:l,y:o,complete:i=!1})=>{const s=f("hsv",h(h({},n.hsv),{},{s:l/e*100,v:100-o/t*100}));a(s),i&&r&&r(s)}},l.createElement("div",{className:"rcp-saturation-cursor",style:{left:o.x,top:o.y,backgroundColor:n.hex}}))},v=({width:e,color:t,onChange:n,onChangeComplete:a})=>{const r=(0,l.useMemo)((()=>{const n=function(e,t){return e/360*t}(t.hsv.h,e);return n}),[t.hsv.h,e]);return l.createElement(b,{className:"rcp-hue",onChange:({x:l,complete:r=!1})=>{const o=f("hsv",h(h({},t.hsv),{},{h:l/e*360}));n(o),r&&a&&a(o)}},l.createElement("div",{className:"rcp-hue-cursor",style:{left:r,backgroundColor:`hsl(${t.hsv.h}, 100%, 50%)`}}))};function y(e,t){return Math.round(e*Math.pow(10,t))/Math.pow(10,t)}const N=/[0-9A-F]/i,x=({color:e,hideHEX:t,onChange:n})=>{const a=(0,l.useCallback)((()=>({value:e.hex,inputted:!1})),[e.hex]),[r,o]=(0,l.useState)(a);return(0,l.useEffect)((()=>{r.inputted||o(a)}),[r.inputted,a]),l.createElement(l.Fragment,null,!t&&l.createElement("div",{className:"rcp-fields-element hex-element"},l.createElement("input",{className:"rcp-fields-element-input",value:r.value,onFocus:()=>o(h(h({},r),{},{inputted:!0})),onChange:e=>{const t=e.target.value;(function(e){return e.startsWith("#")?(e=e.slice(1),N.test(e[e.length-1])):/\w/i.test(e)&&!/\d/.test(e)||""===e})(t)&&(n(f("hex",t)),o(h(h({},r),{},{value:t})))},onBlur:()=>o(h(h({},r),{},{inputted:!1}))}),l.createElement("label",{className:"rcp-fields-element-label"},"HEX")))},C=({color:e,hideRGB:t,hideHSV:n,alpha:a,onChange:r})=>{const o=(0,l.useCallback)((()=>({value:`${e.rgb.r}, ${e.rgb.g}, ${e.rgb.b}${a&&void 0!==e.rgb.a?`, ${y(e.rgb.a,3)}`:""}`,inputted:!1})),[e.rgb,a]),i=(0,l.useCallback)((()=>({value:`${Math.round(e.hsv.h)}\xb0, ${Math.round(e.hsv.s)}%, ${Math.round(e.hsv.v)}%${a&&void 0!==e.hsv.a?`, ${y(e.hsv.a,3)}`:""}`,inputted:!1})),[e.hsv,a]),[s,u]=(0,l.useState)(o),[d,p]=(0,l.useState)(i);return(0,l.useEffect)((()=>{s.inputted||u(o)}),[s.inputted,o]),(0,l.useEffect)((()=>{d.inputted||p(i)}),[d.inputted,i]),l.createElement(l.Fragment,null,(!t||!n)&&l.createElement(l.Fragment,null,!t&&l.createElement("div",{className:"rcp-fields-element"},l.createElement("input",{className:"rcp-fields-element-input",value:s.value,onFocus:()=>u(h(h({},s),{},{inputted:!0})),onChange:e=>{const t=e.target.value.match(/\d+(?:\.\d+)?/g);if(t&&(3===t.length||a&&4===t.length)){const e=function(e){const[t,n,a,l]=e.map(((e,t)=>c(Number(e),t<3?255:1,0)));return{r:t,g:n,b:a,a:l}}(t);r(f("rgb",e))}u(h(h({},s),{},{value:e.target.value}))},onBlur:()=>u(h(h({},s),{},{inputted:!1}))}),l.createElement("label",{className:"rcp-fields-element-label"},"RGB")),!n&&l.createElement("div",{className:"rcp-fields-element"},l.createElement("input",{className:"rcp-fields-element-input",value:d.value,onFocus:()=>p(h(h({},d),{},{inputted:!0})),onChange:e=>{const t=e.target.value.match(/\d+(?:\.\d+)?/g);if(t&&(3===t.length||a&&4===t.length)){const e=function(e){const[t,n,a,l]=e.map(((e,t)=>c(Number(e),t?t<3?100:1:360,0)));return{h:t,s:n,v:a,a:l}}(t);r(f("hsv",e))}p(h(h({},d),{},{value:e.target.value}))},onBlur:()=>p(h(h({},d),{},{inputted:!1}))}),l.createElement("label",{className:"rcp-fields-element-label"},"HSV"))))},E=({color:e,hideHEX:t,hideRGB:n,hideHSV:a,alpha:r,onChange:o})=>l.createElement(l.Fragment,null,(!t||!n||!a)&&l.createElement("div",{className:"rcp-fields"},l.createElement(C,{color:e,hideRGB:n,hideHSV:a,alpha:r,onChange:o}),l.createElement(x,{color:e,hideHEX:t,onChange:o}))),R=({width:e,height:t=e,color:n,onChange:a,onChangeComplete:r,hideHEX:o=!1,hideRGB:i=!1,hideHSV:s=!1,alpha:h=!1,dark:u=!1})=>l.createElement("div",{className:"rcp "+(u?"rcp-dark":"rcp-light"),style:{width:e}},l.createElement(w,{width:e,height:t,color:n,onChange:a,onChangeComplete:r}),l.createElement("div",{className:"rcp-body"},l.createElement(v,{width:e-40,color:n,onChange:a,onChangeComplete:r}),h&&l.createElement(k,{width:e-40,color:n,onChange:a,onChangeComplete:r}),l.createElement(E,{color:n,hideHEX:o,hideRGB:i,hideHSV:s,alpha:h,onChange:a})));const T="root_yWrC",B="blendWrapper_p1Ld",M="blendImg_knkz",S=n.p+"assets/images/al_upbody_desatLuma-eae9ce347556d9caced3c8818f5c1be0.png";function P(e){const t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t);return n.set(new Uint8Array(e)),n}function O(e,t){let n,a,l,{r:r,g:o,b:i}=t;if(e<=127){const t=2*e;n=t*r,a=t*o,l=t*i}else{const t=2*(255-e);n=65025-t*(255-r),a=65025-t*(255-o),l=65025-t*(255-i)}return{r:n+1+(n>>8)>>8,g:a+1+(a>>8)>>8,b:l+1+(l>>8)>>8}}const G=function(){const[e,t]=(0,l.useState)(null),[n,a]=(0,l.useState)(null),[r,o]=(0,l.useState)(null),[s,h]=function(e,t){const[n,a]=(0,l.useState)((()=>{switch(e){case"hex":return f("hex",t);case"rgb":return f("rgb",t);case"hsv":return f("hsv",t);default:return f("hex","#121212")}}));return[n,a]}("hex","#6b875e");return(0,l.useEffect)((async()=>{const e=await(await fetch(S)).arrayBuffer();new i.PNG({filterType:4}).parse(e,(function(e,n){console.log(e,n),e||(t(P(n.data)),a(n))}))}),[]),(0,l.useEffect)((()=>{if(!n||!e)return;n.data=P(e);const t=new Array(256);for(let e=0;e<=255;e++)t[e]=O(e,s.rgb);for(let e=0;e<n.height;e++)for(let a=0;a<n.width;a++){const l=n.width*e+a<<2;if(n.data[l]!==n.data[l+1]||n.data[l+1]!==n.data[l+2])throw new Error("not equal");const{r:r,g:o,b:i}=t[n.data[l]];n.data[l]=r,n.data[l+1]=o,n.data[l+2]=i}const a=function(e){let t="";const n=new Uint8Array(e),a=n.byteLength;for(var l=0;l<a;l++)t+=String.fromCharCode(n[l]);return btoa(t)}(i.PNG.sync.write(n,{colorType:6}));o(a)}),[n,e,s]),(0,l.useEffect)((()=>{console.log("basePngDataBuffer"),console.log(e)}),[e]),l.createElement("div",{className:T},r&&l.createElement("div",{className:B},l.createElement("img",{src:`data:image/png;base64,${r}`,className:M})),l.createElement(R,{width:300,height:150,color:s,onChange:h,hideHSV:!0,hideRGB:!0,dark:!0}))},$={},I="Texture Recoloring",j={unversionedId:"technical-explanations/texture-recoloring",id:"technical-explanations/texture-recoloring",title:"Texture Recoloring",description:"This page explains how texture recoloring can be done without modifying the ROM.",source:"@site/docs/technical-explanations/texture-recoloring.mdx",sourceDirName:"technical-explanations",slug:"/technical-explanations/texture-recoloring",permalink:"/tp-docs/docs/technical-explanations/texture-recoloring",draft:!1,editUrl:"https://github.com/icogn/tp-docs/edit/main/website/docs/technical-explanations/texture-recoloring.mdx",tags:[],version:"current",frontMatter:{},sidebar:"technicalExplanations",previous:{title:"Snowpeak Ruins Lock Softlock",permalink:"/tp-docs/docs/technical-explanations/sprlocksoftlock"}},D={},F=[{value:"Demo",id:"demo",level:2},{value:"Colors",id:"colors",level:2},{value:"Desaturation",id:"desaturation",level:3},{value:"Blending",id:"blending",level:3},{value:"Textures",id:"textures",level:2},{value:"CMPR format",id:"cmpr-format",level:3},{value:"RGB565",id:"rgb565",level:3},{value:"How to recolor CMPR",id:"how-to-recolor-cmpr",level:3},{value:"Bit-swapping",id:"bit-swapping",level:4},{value:"Other",id:"other",level:2},{value:"Partial texture recoloring",id:"partial-texture-recoloring",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Fancy stuff",id:"fancy-stuff",level:3},{value:"References",id:"references",level:2}],H={toc:F};function L(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},H,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"texture-recoloring"},"Texture Recoloring"),(0,r.kt)("p",null,"This page explains how texture recoloring can be done without modifying the ROM."),(0,r.kt)("h2",{id:"demo"},"Demo"),(0,r.kt)("p",null,"You can adjust the color picker to see the texture get recolored."),(0,r.kt)(G,{mdxType:"RecolorDemo"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The above is just for demonstration purposes.\nThe exact color you see in the game depends on the lighting of the area, so the only real way to see how a color looks in the game is to see the color in the game.\nI may publish something to make this easier to accomplish at some point.")),(0,r.kt)("h2",{id:"colors"},"Colors"),(0,r.kt)("p",null,"We're just going to focus on the color and texture parts of the recoloring.\nWhere to hook, how to locate which bytes to change, etc. are out of the scope of this document."),(0,r.kt)("p",null,"Recoloring an image is essentially a two-step process:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Desaturate the image."),(0,r.kt)("li",{parentName:"ol"},"Blend the image with a color.")),(0,r.kt)("h3",{id:"desaturation"},"Desaturation"),(0,r.kt)("p",null,"There are many ways to desaturate a color."),(0,r.kt)("p",null,"We use a quick but effective method of desaturation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"grayValue = 0.22 * r + 0.72 * g + 0.06 * b;\n")),(0,r.kt)("p",null,"We make use of multiplication and shifts to make this calculation very fast."),(0,r.kt)("h3",{id:"blending"},"Blending"),(0,r.kt)("p",null,"There are many ways to blend colors."),(0,r.kt)("p",null,'The algorithm we use is known as an "Overlay" blend.'),(0,r.kt)("p",null,"This algorithm was chosen because when you use a color like 0xFF0000 (red), the result is probably way too red for most people.\nThis is a good thing though, because it means we do not wind up in a situation where people are left wanting more.\nIf the extremes are extreme, then that means any reasonable values that someone might want should be available somewhere in the middle."),(0,r.kt)("p",null,"The blend algorithm is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"f(a,b) = 2ab, if a < 0.5\nf(a,b) = 1 - 2(1 - a)(1 - b), otherwise\n")),(0,r.kt)("p",null,"We make use of multiplication and shifts to speed this calculation up as well, so it is not as slow as it might look."),(0,r.kt)("p",null,"Additionally, since we are only ever converting a gray value (0 through 255) to an RGB value, we can run the blend once for every possible gray value up-front.\nThen as we iterate through the texture, if we need to blend 0x78 (a gray value) with the rgb for example, we can use the cached value.\nThis means we only need to execute the blend a maximum of 256 times no matter how large the texture we are recoloring is."),(0,r.kt)("h2",{id:"textures"},"Textures"),(0,r.kt)("p",null,"The model textures we are currently recoloring are all the same format known as CMPR, so we will discuss the details of this since it can be a little confusing."),(0,r.kt)("p",null,"We'll ignore most of the details since they aren't really important and focus on the changes that happen as they relate to the RGB values."),(0,r.kt)("h3",{id:"cmpr-format"},"CMPR format"),(0,r.kt)("p",null,"The CMPR format can encode the colors for 16 pixels using only 8 bytes of data."),(0,r.kt)("p",null,"This is pretty impressive since if you were to simply use 3 bytes (R,G,B) for each pixel, this would take 48 bytes (6 times as much space)."),(0,r.kt)("p",null,"Each 8 byte chunk can be split up as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Offset"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x00"),(0,r.kt)("td",{parentName:"tr",align:null},"u16"),(0,r.kt)("td",{parentName:"tr",align:null},"leftColor"),(0,r.kt)("td",{parentName:"tr",align:null},"RGB565 value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x02"),(0,r.kt)("td",{parentName:"tr",align:null},"u16"),(0,r.kt)("td",{parentName:"tr",align:null},"rightColor"),(0,r.kt)("td",{parentName:"tr",align:null},"RGB565 value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x04"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"paletteBits"),(0,r.kt)("td",{parentName:"tr",align:null},"16 entries which are 2 bits each.")))),(0,r.kt)("p",null,"The 16 entries each point to either the leftColor, the rightColor, or a derived palette entry."),(0,r.kt)("p",null,"The derived palette is based on the numerical relationship between the leftColor and the rightColor."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"leftColor > rightColor")," (comparing them as ",(0,r.kt)("inlineCode",{parentName:"p"},"uint16_t"),"), then the palette is:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"bits"),(0,r.kt)("th",{parentName:"tr",align:null},"Palette Entry"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"00"),(0,r.kt)("td",{parentName:"tr",align:null},"leftColor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"01"),(0,r.kt)("td",{parentName:"tr",align:null},"rightColor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"2/3 left and 1/3 right")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"1/3 left and 2/3 right")))),(0,r.kt)("p",null,"otherwise (meaning ",(0,r.kt)("inlineCode",{parentName:"p"},"leftColor <= rightColor"),"):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"bits"),(0,r.kt)("th",{parentName:"tr",align:null},"Palette Entry"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"00"),(0,r.kt)("td",{parentName:"tr",align:null},"leftColor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"01"),(0,r.kt)("td",{parentName:"tr",align:null},"rightColor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"1/2 left and 1/2 right")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"transparent")))),(0,r.kt)("h3",{id:"rgb565"},"RGB565"),(0,r.kt)("p",null,"You could say 8 bits of red, then 8 bits of green, then 8 bits of blue might be RGB888."),(0,r.kt)("p",null,"In this way, RGB565 is 5 bits of red, then 6 bits of green, then 5 bits of blue."),(0,r.kt)("p",null,"Pushing these up next to each other makes 16 bits to represent an RGB value."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"leftColor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rightColor")," in the CMPR format are each RGB565 values."),(0,r.kt)("h3",{id:"how-to-recolor-cmpr"},"How to recolor CMPR"),(0,r.kt)("p",null,"We can desaturate, blend, then store the result for the ",(0,r.kt)("inlineCode",{parentName:"p"},"leftColor")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"rightColor"),"."),(0,r.kt)("p",null,"The main thing we have to take into consideration is that we need to handle the relative values of the left and right colors."),(0,r.kt)("p",null,"For example, if L was greater than R before the blend, but afterward they are equal, then we will run into some problems.\nThis is because the derived palette will now be different, so whereas bits ",(0,r.kt)("inlineCode",{parentName:"p"},"11")," previously meant ",(0,r.kt)("inlineCode",{parentName:"p"},"1/3 left and 2/3 right"),", it now means ",(0,r.kt)("inlineCode",{parentName:"p"},"transparent"),"."),(0,r.kt)("p",null,"We can't be having transparency when there shouldn't be any!"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"After the blends, we will have 2 new colors."),(0,r.kt)("p",null,"If the relative values of them are the same as before the blend, then we can just store them and move on."),(0,r.kt)("p",null,"We need to make sure we handle some edge cases otherwise, and here is what the code for that looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"if ( leftIsGreater )\n{\n    if ( leftNewRgb565 == rightNewRgb565 )\n    {\n        // Need to make sure that subtracting 1 does not mess\n        // everything up. For example, 0x1000 - 1 => 0x0fff which is\n        // a completely different color.\n        if ( ( leftNewRgb565 & 0x1f ) == 0 )\n        {\n            // If left value has 0 blue, we change its blue to 1.\n            leftNewRgb565 += 1;\n        }\n        rightNewRgb565 = leftNewRgb565 - 1;\n    }\n    else if ( leftNewRgb565 < rightNewRgb565 )\n    {\n        needsBitSwap = true;\n    }\n}\nelse if ( leftNewRgb565 > rightNewRgb565 )\n{\n    needsBitSwap = true;\n}\n")),(0,r.kt)("p",null,'So if "left was greater and now right is greater" or if "right was greater and now left is greater", we need to update the palette bits to point to the correct palette entry (the ',(0,r.kt)("inlineCode",{parentName:"p"},"needsBitSwap")," parts)."),(0,r.kt)("p",null,"In the specific case that \"left was greater, but now they are equal\", we actually have to modify the left one to still be greater.\nIf we didn't do this, we would get some transparency in the palette when there shouldn't be any."),(0,r.kt)("p",null,"To fix this, we set the right to be one less than the left."),(0,r.kt)("p",null,"There is an additional edge-case within the edge-case in which subtracting 1 from the new leftColor would cause problems if the leftColor had 0 blue."),(0,r.kt)("p",null,"For example, if both of the new colors were 0x1000, when we subtract 1 from the right one, we would get 0xfff.\nThis is a completely different color which actually has maximum blue!"),(0,r.kt)("p",null,"So in the case that the blue of the leftColor is 0, we set it to be 1 in the leftColor and 0 in the rightColor."),(0,r.kt)("h4",{id:"bit-swapping"},"Bit-swapping"),(0,r.kt)("p",null,"For the cases that we need to update the palette bits, we use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// In the case of left being greater than right:\n// 0b00 will swap to 0b01\n// 0b01 will swap to 0b00\n// 0b10 will swap to 0b11\n// 0b11 will swap to 0b10\n// So the left bit stays the same, and the right bit changes\n// Can do xor (^) like 0b01010101 or 0x55 for each u16\n\n// In the case of left not being greater than right:\n// 0b00 will swap to 0b01\n// 0b01 will swap to 0b00\n// 0b10 will stay the same\n// 0b11 will stay the same\n// so if the left bit is a 0, the right bit will change\nuint32_t swapIndexBits( bool leftIsGreater, uint32_t bits )\n{\n    if ( leftIsGreater )\n    {\n        return bits ^ 0x55555555;\n    }\n    else\n    {\n        uint32_t mask = ( ( bits >> 1 ) & 0x55555555 ) ^ 0x55555555;\n        return bits ^ mask;\n    }\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Humans perceive blue less than red and green, so that is why we make modifications to the blue when we handle the "left was greater, but the new ones are equal" edge-case.\nThis is also why blue has the smallest coefficient in the desaturate function.')),(0,r.kt)("h2",{id:"other"},"Other"),(0,r.kt)("h3",{id:"partial-texture-recoloring"},"Partial texture recoloring"),(0,r.kt)("p",null,"You can also use a callback function to only conditionally recolor parts of the texture.\nThis is needed for something like the Hylian Shield which is a large number of colors."),(0,r.kt)("p",null,"You can do a pretty decent job of recoloring just the bird on the shield.\nBut this kind of thing has to be handled case-by-case."),(0,r.kt)("h3",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"This is mainly meant to work with colors on 3D models, but even then some things are handled differently, so you will still have to solve for each thing based on research findings."),(0,r.kt)("p",null,"This has only been written to support updating CMPR textures, but you could theoretically handled other formats as well."),(0,r.kt)("h3",{id:"fancy-stuff"},"Fancy stuff"),(0,r.kt)("p",null,"You could theoretically do gradients and whatnot as well, but the code for this would be more complicated."),(0,r.kt)("p",null,"Maybe worth looking into how MAT stuff works more to see what is possible there."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(o.Z,{to:"https://tannerhelland.com/2011/10/01/grayscale-image-algorithm-vb6.html",mdxType:"Link"},"Seven grayscale conversion algorithms (with pseudocode and VB6 source code)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(o.Z,{to:"https://docs.gimp.org/2.10/en/gimp-filter-desaturate.html",mdxType:"Link"},"GIMP - Desaturate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(o.Z,{to:"https://en.wikipedia.org/wiki/Blend_modes#Overlay",mdxType:"Link"},"Wikipedia - Blend modes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(o.Z,{to:"https://wiki.tockdom.com/wiki/Image_Formats#CMPR",mdxType:"Link"},"Custom Mario Kart Wiiki - Image Formats"))))}L.isMDXComponent=!0}}]);