"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4657],{8958:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>x,contentTitle:()=>S,default:()=>R,frontMatter:()=>N,metadata:()=>C,toc:()=>D});var n=a(7462),i=a(7294),l=a(3905),r=(a(9960),a(2568)),o=a.n(r),s=a(7536);const u="root_PfOy",h="description_NG81",d="versionLabel_oIqo",m="textarea_f5q3",p="gridGroup_gh3q",c="filenameLabel_AgRF",k=JSON.parse('["Aeralfos","Agitha","Ant","Argorok","Armos","Ashei","Auru","BackSlice","Bari","Barnes","Beamos","Beth","BigBaba","Blizzeta","Bo","Bokoblin","Bombfish","Borville","Bulblin","Butterfly","CastleTown","Charlo","Cheese","Chilfos","Chu","Chudley","Clawshot","Colin","Coro","Cucco","Dangoro","Darbus","Darkhammer","Darknut","Dayfly","DeathSword","DekuToad","Dodongo","Dragonfly","Dynalfos","Eldin","Epona","Fado","Fairy","Falbi","Fanadi","Faron","Freezard","Fyer","Ganondorf","Gengle","GhoulRat","Gibdo","GorCoron","GorLiggs","Goron","GreatSpin","Greengill","Guay","Hanch","Hannah","Hawkeye","Helmasaur","Hena","HorseGrass","Hylian","Jaggle","Jovani","JumpStrike","Keese","Kili","Ladybug","Lanayru","Lantern","Leever","Link","Lizalfos","Louise","Luda","Malo","Malver","Mantis","Midna","Misha","Moldorm","Morpheel","Ooccoo","Ook","Ordona","Pergie","Phasmid","Plumm","Poe","Postman","Pumpkin","Puppet","Purdy","Ralis","Reekfish","Renado","Rupee","Rusl","Rutela","Sage","Sera","Shad","ShellBlade","Sketch","SkullKid","Skulltula","SkyBook","Snail","Snowpeak","Soal","Spinner","Stalfos","Stallord","Talo","Tektite","Telma","Toadpoli","Trill","Twilight","Uli","WolfLink","Zant","Zelda","Zora"]'),g=JSON.parse('["Abnormal","Above","Absent","Absolute","Abstract","Absurd","Accurate","Active","Actual","Acute","Adequate","Adjacent","Adverse","Aesthetic","Afraid","Aggressive","Alien","Alive","Alone","Alright","Amateur","Ambitious","Ample","Ancient","Angry","Annual","Anxious","Apparent","Arctic","Artistic","Ashamed","Asleep","Assistant","Atomic","Attractive","Authentic","Average","Awake","Aware","Awful","Awkward","Bad","Basic","Beautiful","Big","Bitter","Bizarre","Blonde","Bloody","Blue","Bold","Brave","Brief","Bright","Brilliant","Broad","Brown","Busy","Calm","Capable","Careful","Casual","Causal","Cautious","Central","Certain","Cheap","Cheerful","Chemical","Chief","Chronic","Circular","Civil","Classic","Clean","Clever","Clinical","Close","Coastal","Cognitive","Coherent","Cold","Collective","Colorful","Comic","Commercial","Common","Compact","Competent","Complete","Complex","Concrete","Confident","Conscious","Consequent","Consistent","Constant","Content","Contrary","Cool","Corporate","Correct","Costly","Crazy","Creative","Criminal","Critical","Crude","Cruel","Cultural","Curious","Current","Daily","Damp","Dangerous","Dark","Deadly","Decent","Decisive","Defensive","Definite","Delicate","Delicious","Delightful","Dependent","Desperate","Determined","Different","Difficult","Digital","Direct","Dirty","Disastrous","Distant","Distinct","Divine","Domestic","Dominant","Double","Doubtful","Dramatic","Dreadful","Dull","Dynamic","Eager","Early","Eastern","Easy","Effective","Elderly","Electric","Elegant","Empty","Endless","Enormous","Entire","Equal","Essential","Eternal","Evil","Excellent","Exotic","Expensive","External","Extra","Extreme","Factual","Faint","Faithful","False","Famous","Fantastic","Fast","Fatal","Favorite","Feasible","Federal","Fellow","Fierce","Final","Financial","Fiscal","Flexible","Foolish","Formal","Fortunate","Forward","Fragile","Free","Frequent","Fresh","Friendly","Front","Full","Fun","Functional","Funny","Furious","Future","Generous","Gentle","Genuine","Giant","Global","Glorious","Golden","Good","Gothic","Gradual","Grand","Grateful","Great","Green","Grim","Gross","Guilty","Half","Handsome","Handy","Happy","Harmful","Harsh","Healthy","Heavy","Helpful","Historic","Honest","Horrible","Hostile","Huge","Hungry","Imminent","Immune","Implicit","Important","Impressive","Indirect","Indoor","Infinite","Informal","Inherent","Initial","Inner","Innocent","Instant","Internal","Intimate","Jealous","Judicial","Junior","Kind","Large","Last","Late","Lazy","Lesser","Level","Light","Likely","Linear","Linguistic","Liquid","Little","Lively","Local","Logical","Lonely","Long","Loud","Lovely","Loyal","Lucky","Luxury","Mad","Magical","Magnetic","Mainstream","Major","Manual","Marine","Marvellous","Massive","Maximum","Meaningful","Medical","Medieval","Medium","Mental","Mere","Middle","Mighty","Mild","Minimal","Minor","Mobile","Moderate","Modest","Monthly","Moral","Multiple","Musical","Mutual","Natural","Naval","Nearby","Neat","Negative","Nervous","Neutral","Next","Nice","Noble","Noisy","Normal","Northern","Notable","Nuclear","Numerous","Objective","Obscure","Obvious","Odd","Offensive","Official","Okay","Old","Only","Open","Opposite","Optical","Optional","Orange","Organic","Outdoor","Painful","Parallel","Partial","Passive","Past","Patient","Payable","Peaceful","Perfect","Permanent","Persistent","Personal","Petty","Pink","Plain","Plausible","Polite","Popular","Portable","Positive","Potential","Powerful","Practical","Precious","Pretty","Previous","Primitive","Prior","Private","Probable","Productive","Profound","Prominent","Proper","Protective","Provincial","Public","Pure","Purple","Quick","Quiet","Random","Rapid","Rational","Recent","Red","Redundant","Regional","Regular","Relevant","Reluctant","Remote","Resident","Retail","Right","Rigid","Rival","Romantic","Rotten","Rough","Round","Royal","Rubber","Rude","Rural","Sacred","Sad","Safe","Seasonal","Second","Secret","Secure","Selective","Senior","Sensitive","Serious","Severe","Shallow","Sharp","Sheer","Short","Shy","Sick","Silent","Silly","Similar","Simple","Slim","Slow","Small","Smart","Smooth","Social","Soft","Solar","Solid","Southern","Spare","Specific","Splendid","Square","Stable","Standard","Static","Steady","Steep","Sticky","Subjective","Subsequent","Successful","Sudden","Suitable","Sunny","Super","Supportive","Surplus","Suspicious","Sweet","Symbolic","Tall","Technical","Tender","Terrible","Thin","Third","Tiny","Top","Total","Tough","Toxic","Tragic","Tremendous","Trivial","Tropical","Twentieth","Typical","Ultimate","Unaware","Uncertain","Uneasy","Unfair","Unhappy","Uniform","Unique","Unknown","Unlawful","Unlikely","Unpleasant","Unwilling","Upset","Urban","Useful","Usual","Vacant","Vague","Valid","Verbal","Vertical","Viable","Vicious","Vigorous","Violent","Virtual","Visible","Vital","Vivid","Warm","Weak","Weekly","Weird","Western","Wicked","Widespread","Wise","Wonderful","Wooden","Worthy","Zany"]');function f(e){const t=[];let a=e;for(let n=0;n<3;n++){const e=a%41;t.push("0123456789abcDefghiJkLmNopQrstuVwxyzABEHR"[e]),a=(a-e)/41}return t.reverse().join("")}function w(e){let{label:t,value:a}=e;return i.createElement("div",{className:p},i.createElement("div",{className:c},t),i.createElement("div",null,a))}function y(e){let{control:t}=e;const a=(0,s.qo)({control:t}),{internalFilename:n,osFilename:l}=function(e){let{verMajor:t,verMinor:a,gameVer:n,textAreaContent:i}=e,l="GE";switch(n){case"GZ2E":l="ge";break;case"GZ2P":l="gp";break;case"GZ2J":l="gj";break;case"RZDE":l="re";break;case"RZDP":l="rp";break;case"RZDJ":l="rj";break;case"RZDK":l="rk"}const r=o()(i).substring(0,8),s=parseInt(r,16),u=s>>16&127,h=`${g[s>>>23]+k[u]}_${f(65535&s)}`;return{internalFilename:`sd${f(t)}${f(a)}${h}`,osFilename:`TprSeed-v${t}.${a}${l}--${h}.gci`}}(a);return i.createElement(i.Fragment,null,i.createElement(w,{label:"osFilename",value:l}),i.createElement(w,{label:"internalFilename",value:n}))}const b=e=>{let{field:{onChange:t,...a}}=e;return i.createElement("input",(0,n.Z)({},a,{type:"number",min:"0",max:"65535",maxLength:"5",autoComplete:"off",onChange:e=>{let a=e.target.value.replace(/[^01-9]+/g,""),n=-1;for(let t=0;t<a.length;t++)if("0"!==a[t]){n=t;break}n>0&&(a=a.substring(n)),a.length>5?a="65535":a.length<1&&(a="0");const i=parseInt(a,10);i<0?a="0":i>65535&&(a="65535"),e.target.value=a,t(e)}}))};const v=function(){const{control:e,register:t}=(0,s.cI)({defaultValues:{verMajor:"17",verMinor:"3",gameVer:"GZ2E",textAreaContent:"Change me to see the adjectives and nouns change."}});return i.createElement("p",null,i.createElement("div",{className:u},i.createElement("h3",null,"Example Filename Generator"),i.createElement("div",{className:h},"Edit the fields below to see example filenames."),i.createElement("div",{className:p},i.createElement("label",{className:d},"versionMajor"),i.createElement(s.Qr,{control:e,name:"verMajor",render:b})),i.createElement("div",{className:p},i.createElement("label",{className:d},"versionMinor"),i.createElement(s.Qr,{control:e,name:"verMinor",render:b})),i.createElement("div",{className:p},i.createElement("label",{className:d},"gameVersion"),i.createElement("select",t("gameVer"),i.createElement("option",{value:"GZ2E"},"GZ2E (GC US)"),i.createElement("option",{value:"GZ2P"},"GZ2P (GC PAL)"),i.createElement("option",{value:"GZ2J"},"GZ2J (GC JP)"),i.createElement("option",{value:"RZDE"},"RZDE (Wii US)"),i.createElement("option",{value:"RZDP"},"RZDP (Wii US)"),i.createElement("option",{value:"RZDJ"},"RZDJ (Wii JP)"),i.createElement("option",{value:"RZDK"},"RZDK (Wii Korea)"))),i.createElement("div",{className:p},i.createElement(s.Qr,{control:e,name:"textAreaContent",render:e=>{let{field:t}=e;return i.createElement("textarea",(0,n.Z)({},t,{className:m,rows:"4"}))}})),i.createElement(y,{control:e})))},N={},S="Rando Seed File Thoughts",C={unversionedId:"technical-explanations/rando-seed-file-thoughts",id:"technical-explanations/rando-seed-file-thoughts",title:"Rando Seed File Thoughts",description:"This page describes solutions to the following problems:",source:"@site/docs/technical-explanations/rando-seed-file-thoughts.mdx",sourceDirName:"technical-explanations",slug:"/technical-explanations/rando-seed-file-thoughts",permalink:"/tp-docs/docs/technical-explanations/rando-seed-file-thoughts",draft:!1,editUrl:"https://github.com/icogn/tp-docs/edit/main/website/docs/technical-explanations/rando-seed-file-thoughts.mdx",tags:[],version:"current",frontMatter:{},sidebar:"technicalExplanations",previous:{title:"OSTicksToCalendarTime",permalink:"/tp-docs/docs/technical-explanations/ostickstocalendartime"},next:{title:"Rando Seed Versioning",permalink:"/tp-docs/docs/technical-explanations/rando-seed-versioning"}},x={},D=[{value:"Before continuing",id:"before-continuing",level:3},{value:"Version scheme",id:"version-scheme",level:2},{value:"Documenting versions",id:"documenting-versions",level:3},{value:"Randomizer",id:"randomizer",level:4},{value:"Seed Data",id:"seed-data",level:4},{value:"Naming seed files",id:"naming-seed-files",level:2},{value:"Breaking through the 10 seed limit",id:"breaking-through-the-10-seed-limit",level:2},{value:"Seed filename parts",id:"seed-filename-parts",level:2},{value:"Version numbers",id:"version-numbers",level:3},{value:"How to convert between chars and u16",id:"how-to-convert-between-chars-and-u16",level:4},{value:"Human-readable part",id:"human-readable-part",level:3},{value:"Generating the human-readable part",id:"generating-the-human-readable-part",level:4},{value:"Making 32 bits human-readable",id:"making-32-bits-human-readable",level:4},{value:"Picking out adjectives",id:"picking-out-adjectives",level:4},{value:"Picking out nouns",id:"picking-out-nouns",level:4},{value:"Image and debug info",id:"image-and-debug-info",level:2},{value:"Image data",id:"image-data",level:3},{value:"Debug info",id:"debug-info",level:3}],T={toc:D};function R(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},T,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rando-seed-file-thoughts"},"Rando Seed File Thoughts"),(0,l.kt)("p",null,"This page describes solutions to the following problems:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Randomizer and SeedData version schemes"),(0,l.kt)("li",{parentName:"ul"},"Ten seed limit and internal gci filename clashes"),(0,l.kt)("li",{parentName:"ul"},"Better seed image data handling"),(0,l.kt)("li",{parentName:"ul"},"Debug info in the seed data to help when people report bugs")),(0,l.kt)("h3",{id:"before-continuing"},"Before continuing"),(0,l.kt)("p",null,"Remember that a ",(0,l.kt)("inlineCode",{parentName:"p"},"GCI")," is not a real concept from the GameCube's perspective."),(0,l.kt)("p",null,"The first 0x40 bytes of a GCI file is a ",(0,l.kt)("inlineCode",{parentName:"p"},"DirectoryEntry")," which lives on the special ",(0,l.kt)("inlineCode",{parentName:"p"},"Directory")," block (and its backup block) on the memory card.\nThese special blocks are the reason memory card sizes are values like 59 (which is 64 minus the reserved 5 special blocks)."),(0,l.kt)("p",null,"The remaining bytes (which will have a length that is a multiple of 0x2000) form a number of blocks which are stored on the memory card.\nThey are not necessarily contiguous on the memory card (though you don't have to worry about this)."),(0,l.kt)("p",null,"I will use the term ",(0,l.kt)("inlineCode",{parentName:"p"},"GCI")," to refer to a file and its metadata on the memory card, but keep in mind that GCIs are an invented concept that has nothing to do with Nintendo."),(0,l.kt)("h2",{id:"version-scheme"},"Version scheme"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"Randomizer")," refers to the file (and its metadata/DirectoryEntry) on the memory card which makes everything happen and which takes the seed data as input."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"Seed")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"SeedData")," GCI refers to the file (and its metadata/DirectoryEntry) on the memory card which is used as input to the Randomizer.\nIt specifies things like where items go and what color your tunic should be.")),(0,l.kt)("p",null,"Both of these things have a version number which consists of the following:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"versionMajor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"versionMinor")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All ",(0,l.kt)("inlineCode",{parentName:"li"},"major version numbers")," start at 1 and increment whenever there is a significant change.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For the Randomizer, a major version change can happen whenever it feels appropriate.\nMaybe this is when major refactoring occurs or major features are added."),(0,l.kt)("li",{parentName:"ul"},"For the SeedData, a major version change MUST happen whenever there is a change to the file's internal structure such that the following are all true:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The new SeedData file will not work in some ways with existing versions of the Randomizer."),(0,l.kt)("li",{parentName:"ul"},"The ways the SeedData no longer works are considered significant enough that:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the SeedData would not work at all (simply incompatible)."),(0,l.kt)("li",{parentName:"ul"},"or we do not want to allow people to even attempt to use those versions of the Randomizer and the SeedData together."))))))),(0,l.kt)("li",{parentName:"ul"},"All ",(0,l.kt)("inlineCode",{parentName:"li"},"minor version numbers")," start at 0 and increment whenever there is a change that does not require a major version change.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The minor version number will also reset back to 0 whenever the major version increments."),(0,l.kt)("li",{parentName:"ul"},"Increment the minor version when:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For the Randomizer, this will probably be the case for most updates.\nThe Randomizer version is only important from the perspective of documentation and communicating expectations to the playerbase."),(0,l.kt)("li",{parentName:"ul"},'For the SeedData, this will occur whenever there is a non-breaking change such as "now the seed supports Ball and Chain recoloring".\nIt is not worth forcing someone to update their Randomizer if the only part of the Seed it does not support is largely inconsequential (we can simply warn them that they may want to update their Randomizer version).')))))),(0,l.kt)("p",null,"The following is how a version number (in the format ",(0,l.kt)("inlineCode",{parentName:"p"},"major.minor"),") might change over time:"),(0,l.kt)("p",null,"1.0 => 1.1 => 1.2 => 2.0 => 3.0 => 3.1 => 3.2 => 4.0 => 4.1"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Internally the Randomizer knows which Seed versions it supports:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"minSeedVerMajor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"minSeedVerMinor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"fullSupportMaxSeedVerMajor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"u16"),(0,l.kt)("td",{parentName:"tr",align:null},"fullSupportMaxSeedVerMajor")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any Seed with a version that:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"is below the ",(0,l.kt)("inlineCode",{parentName:"li"},"minSeedVer")," will be 100% NOT supported.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For example, minSeedVer is 10.5 and the Seed is version 10.2."))),(0,l.kt)("li",{parentName:"ul"},"is between the ",(0,l.kt)("inlineCode",{parentName:"li"},"minSeedVer")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"fullSupportMaxSeedVer")," (inclusive) will be 100% supported.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For example, minSeedVer is 14.3, fullSupportMaxSeedVer is 16.2, and the Seed is version 15.23."))),(0,l.kt)("li",{parentName:"ul"},"has a ",(0,l.kt)("inlineCode",{parentName:"li"},"versionMajor")," which is greater than ",(0,l.kt)("inlineCode",{parentName:"li"},"fullSupportMaxSeedVerMajor")," will be 100% NOT supported.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For example, fullSupportMaxSeedVer is 16.2, and the Seed is version 17.0."))),(0,l.kt)("li",{parentName:"ul"},"has a ",(0,l.kt)("inlineCode",{parentName:"li"},"versionMajor")," which is equal to ",(0,l.kt)("inlineCode",{parentName:"li"},"fullSupportMaxSeedVerMajor")," and a ",(0,l.kt)("inlineCode",{parentName:"li"},"versionMinor")," which is greater than ",(0,l.kt)("inlineCode",{parentName:"li"},"fullSupportMaxSeedVerMinor")," will be PARTIALLY supported.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For example, fullSupportMaxSeedVer is 12.4 and the Seed is version 12.5.")))))),(0,l.kt)("p",null,"For example, we might have the following files on the memory card:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Randomizer v1.3, which supports Seed versions 12.3 to 15.2"),(0,l.kt)("li",{parentName:"ul"},"Seed v11.7 (no support)"),(0,l.kt)("li",{parentName:"ul"},"Seed v13.0 (full support)"),(0,l.kt)("li",{parentName:"ul"},"Seed v15.0 (full support)"),(0,l.kt)("li",{parentName:"ul"},"Seed v15.2 (full support)"),(0,l.kt)("li",{parentName:"ul"},"Seed v15.3 (partial support)"),(0,l.kt)("li",{parentName:"ul"},"Seed v16.3 (no support)")),(0,l.kt)("p",null,"When the Randomizer scans the memory card for seed files, it will warn the user if it finds any which are not fully supported."),(0,l.kt)("p",null,"For example, 0 or more of the following could show:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'"Found X seed files with unsupported versions.\nYou must update the Randomizer version on your memory card to play these seeds."'),(0,l.kt)("li",{parentName:"ul"},'"Found Y seed files with versions which are no longer supported."'),(0,l.kt)("li",{parentName:"ul"},'"Found Z seed files which are partially supported.\nYou can still play these seeds, but some minor features such as certain recoloring may not work.\nIt is recommended that you update the Randomizer version on your memory card."')),(0,l.kt)("p",null,"When the user is paging through their available seeds, if a seed they are viewing has any of the above issues, we will display the message there as well:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'"You must update the Randomizer version on your memory card to play this seed."'),(0,l.kt)("li",{parentName:"ul"},'"This seed version is no longer supported."'),(0,l.kt)("li",{parentName:"ul"},'"This seed is partially supported.\nYou can still play it, but some minor features such as certain recoloring may not work."')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"I am using recoloring as an example, but it could be any minor feature.\nAlso, those messages are just examples I came up with pretty quickly.")),(0,l.kt)("h3",{id:"documenting-versions"},"Documenting versions"),(0,l.kt)("h4",{id:"randomizer"},"Randomizer"),(0,l.kt)("p",null,"On GitHub (I assume), each Randomizer release should have the following information immediately visible:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Randomizer version",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Nothing new here."))),(0,l.kt)("li",{parentName:"ul"},"Minimum and maximum supported Seed versions",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'Only need to include these 2 values without any other explanation.\nThe Randomizer will display "partial support" messages if the user needs to see them.')))),(0,l.kt)("h4",{id:"seed-data"},"Seed Data"),(0,l.kt)("p",null,"A changelog of the Seed Data can probably be hosted on the Randomizer generator website (for example, in a modal the user can open, or that opens automatically whenever there is an update. I'm sure you've seen things that do this)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"It is important to have a paper trail of when changes happened in both the Randomizer and the SeedData.")),(0,l.kt)("p",null,"Here is an example of the some entries in the SeedData changelog:"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Randomizer SeedData Version History")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note: You may need to update your Randomizer version to get all of the latest features.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Version 17.2 (2022/07/11)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added recoloring support for the Master Sword blade color.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Version 17.1 (2022/07/03)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ability to skip Bo wrestling.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Version 17.0 (2022/06/20)")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Update your Randomizer version to at least v1.4 to play Seeds with version 17.x.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Made some important breaking change.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Version 16.1 (2022/05/07)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Fixed typo in the custom text for XYZ.")),(0,l.kt)("p",null,"..."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"naming-seed-files"},"Naming seed files"),(0,l.kt)("p",null,"Next we will address the following problems:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Seed filename clashes on the memory card."),(0,l.kt)("li",{parentName:"ul"},"Breaking through the 10 seed limit on the memory card.")),(0,l.kt)("p",null,"Before going into more details, I recommend playing around with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Example Filename Generator")," tool directly beneath this to get a feel for what the filenames would look like (I think it's kind of fun)."),(0,l.kt)("p",null,"You can edit any of the fields below to see the output change.\nThe textarea will change the ",(0,l.kt)("inlineCode",{parentName:"p"},"AdjectiveNoun_abc")," part."),(0,l.kt)(v,{mdxType:"SeedFilenameGeneratorDemo"}),(0,l.kt)("h2",{id:"breaking-through-the-10-seed-limit"},"Breaking through the 10 seed limit"),(0,l.kt)("p",null,"In the current Seed design, Seed GCIs can only have 10 different hardcoded names.\nI am not going to spend the time typing up why that is undesirable."),(0,l.kt)("p",null,"There is one benefit of doing it this way though:",(0,l.kt)("br",null),"\nto check for seeds on the memory card, we can simply check for every filename in a hardcoded list."),(0,l.kt)("p",null,"So is there a way to check for seed files on the memory card which does not require us to use hardcoded values?"),(0,l.kt)("p",null,"Fortunately, yes.\nHere is what we can do:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Seed names now follow a pattern instead of being hardcoded values which can easily clash."),(0,l.kt)("li",{parentName:"ul"},"Iterate through the ",(0,l.kt)("inlineCode",{parentName:"li"},"DirectoryEntry"),"s (file metadata) on the memory card (thankfully, there is a fixed limit of 127 files on a memory card).",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"For each ",(0,l.kt)("inlineCode",{parentName:"li"},"DirectoryEntry"),", make sure its ",(0,l.kt)("inlineCode",{parentName:"li"},"gameCode")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"publisherCode"),' match the current game we are playing (for example, "GZ2E01").\nThis confirms that the file on the memory card is a file for Twilight Princess.'),(0,l.kt)("li",{parentName:"ul"},"For each ",(0,l.kt)("inlineCode",{parentName:"li"},"DirectoryEntry"),", make sure its ",(0,l.kt)("inlineCode",{parentName:"li"},"filename")," matches the pattern we use to indicate that this file on the memory card is ",(0,l.kt)("inlineCode",{parentName:"li"},"SeedData"),".\nThis confirms that the file on the memory card is a Randomizer seed file.")))),(0,l.kt)("p",null,"And it's that simple."),(0,l.kt)("hr",null),(0,l.kt)("p",null,"We still have some other problems to solve though."),(0,l.kt)("p",null,"Using only the ",(0,l.kt)("inlineCode",{parentName:"p"},"DirectoryEntry"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"how can the we know the Seed's ",(0,l.kt)("inlineCode",{parentName:"li"},"versionNumber"),"?",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"We need this to determine compatibility betweeen the Randomizer and the SeedData."))),(0,l.kt)("li",{parentName:"ul"},"how can we know the Seed's human-readable name?",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"We need this so the user can pick the correct seed while playing the Rando.")))),(0,l.kt)("p",null,"It is imperative that we can determine these things from the metadata (DirectoryEntry), or we would have to potentially read the file contents of 127 files which is unacceptable."),(0,l.kt)("p",null,"To store arbitrary data, the only space we have in the ",(0,l.kt)("inlineCode",{parentName:"p"},"DirectoryEntry")," (without getting funky) is the ",(0,l.kt)("inlineCode",{parentName:"p"},"filename"),", a string which can be up to 32 characters long."),(0,l.kt)("h2",{id:"seed-filename-parts"},"Seed filename parts"),(0,l.kt)("p",null,"To reiterate, we have 32 characters to do the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"include a pattern which indicates this file is a ",(0,l.kt)("inlineCode",{parentName:"li"},"SeedData")," file."),(0,l.kt)("li",{parentName:"ul"},"include the Seed's major and minor version number"),(0,l.kt)("li",{parentName:"ul"},"include the human-readable part of the Seed's name",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'this part is largely responsible for preventing filename clashes.\nIt will look something like "PurpleMidna".')))),(0,l.kt)("h3",{id:"version-numbers"},"Version numbers"),(0,l.kt)("p",null,"A version number (major or minor) is a u16, which is 16 bits of data (min 0, max 65535)."),(0,l.kt)("p",null,"So how many alphanumeric characters does it take to represent a u16?"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"We are sticking to alphanumeric characters since this is a filename.")),(0,l.kt)("p",null,'We can trivially use 4 characters.\nFor example, 0xffff can be written as "FFFF".'),(0,l.kt)("p",null,"How about 2 characters?"),(0,l.kt)("p",null,"Each character would need to represent 8 bits, meaning we would need 2^8 or 128 different possible characters for this.\nWe only have 62 characters to work with (10 numbers + 26 uppercase + 26 lowercase), so that is not going to happen."),(0,l.kt)("p",null,"So how about 3 characters?"),(0,l.kt)("p",null,"If each character represented 6 bits, we would be able to represent 18 bits in 3 characters which is good.\nTo do this, we would need 6 bits per character, meaning we would need 2^6 or 64 different characters to do this.\nThis is slightly outside of our 62 limit, but it is still a possibility."),(0,l.kt)("p",null,"Five bits per character would only require 32 different characters, but it would only allow us to represent 15 bits in 3 characters and we need to represent 16 bits."),(0,l.kt)("p",null,"So maybe we can use a number of characters somewhere between 32 and 62?"),(0,l.kt)("p",null,"It turns out that 41 different characters is the smallest amount we can use to represent 16 bits in 3 characters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"// Needs to be at least 65535\n39^3 => 59319\n40^3 => 64000\n41^3 => 68921 (this one)\n42^3 => 74088\n")),(0,l.kt)("p",null,"This is a pretty good number -- only 5 more than 26 + 10, meaning we only need to include an uppercase and lowercase version of the same letter for 5 letters."),(0,l.kt)("h4",{id:"how-to-convert-between-chars-and-u16"},"How to convert between chars and u16"),(0,l.kt)("p",null,'Imagine we had the string "abc".'),(0,l.kt)("p",null,"Each character will map to a number between 0 and 40."),(0,l.kt)("p",null,'Let\'s say that "a" is 10, "b" is 11, and "c" is 12.'),(0,l.kt)("p",null,"To get the u16, we would do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"(10 * 41^2) + (11 * 41^1) + (12 * 41^0)\nwhich gives 17273 or 0x4379\n")),(0,l.kt)("p",null,"Here is some js code for going the other way (u16 to char","[3]","):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const chars = '0123456789abcDefghiJkLmNopQrstuVwxyzABEHR';\n\nfunction sixteenBitTo3Char(number) {\n  const iterations = 3;\n  const charCount = 41;\n\n  const arr = [];\n  let currNum = number;\n\n  for (let i = 0; i < iterations; i++) {\n    const charIndex = currNum % charCount;\n    arr.push(chars[charIndex]);\n    currNum = (currNum - charIndex) / charCount;\n  }\n\n  return arr.reverse().join('');\n}\n")),(0,l.kt)("p",null,"You can scroll back up to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Example Filename Generator")," and change the major and minor versions to see it in action."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},'Another benefit of using 41 characters instead of 64 is that the 3 characters in the string will vary more.\nIf you had 64 characters, one of them would only ever be a small portion of its 64 possibilities.\nThis is much less pronounced with 41 characters.\nUsing the above letters, the first character will never be "H" or "R", but it still has 39 possibilities.')),(0,l.kt)("h3",{id:"human-readable-part"},"Human-readable part"),(0,l.kt)("p",null,'We want to have some part of the filename that looks like "AdjectiveNoun" for a couple of reasons:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it allows people to more easily reference a seed when communicating.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Don't want to have to say \"Yes, it's seed dshf829hfo9aiwnf2\" (hit random keys)"))),(0,l.kt)("li",{parentName:"ul"},"having a bunch of different options here is how we prevent filename clashes")),(0,l.kt)("p",null,"First, let's think about what it means for two seeds to be different.\nAlternatively we can say, when should the generated filename be exactly the same?"),(0,l.kt)("p",null,"For example, if you were to generate a seed with the same u64 randomization starting point and the same settings string on the same exact Generator code, you should get the exact same seed generated (meaning the filename is the same as well)."),(0,l.kt)("p",null,"However, if multiple people want to play the same seed (as confirmed by the filename), they should't have to use the same cosmetic options (since the playthrough will be exactly the same for each from a gameplay perspective)."),(0,l.kt)("p",null,"Or maybe the same person generates a seed which is the same from one they have already played except for the tunic color.\nIt would pointless for them to essentially play the exact same playthrough without realizing it."),(0,l.kt)("p",null,"Let us directly address an important conclusion from the above examples:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"The filename is representative of the playthrough experience."))),(0,l.kt)("p",null,"If you show someone two files which have the exact same name, they will say they represent the same playthrough."),(0,l.kt)("p",null,"If you show someone two files which have different names, they will expect them to be completely different things."),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Let's think about some things which define the playthrough experience:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"item locations"),(0,l.kt)("li",{parentName:"ul"},"starting items"),(0,l.kt)("li",{parentName:"ul"},"starting location")),(0,l.kt)("p",null,"Or more broadly, thinking about a playthrough as a graph traversal:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"your starting state"),(0,l.kt)("li",{parentName:"ul"},"your ability to traverse the graph",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"for example, skip MDH on or off provides two different playthrough graphs.",(0,l.kt)("br",null),"\nBeing able to transform anywhere is also a different graph compared to one in which you can't."))),(0,l.kt)("li",{parentName:"ul"},"where state changes occur",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"where items are located, or any state changes resulting from traversing an edge."))),(0,l.kt)("li",{parentName:"ul"},"settings which allow you to traverse the same edge on a graph more quickly (for example, quick climbing)")),(0,l.kt)("p",null,"On the opposite side, what about things where if two people were racing, changing any of these would not give anyone an advantage over anyone else:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"anything which does not affect any of the things listed above",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"recoloring"),(0,l.kt)("li",{parentName:"ul"},"anything else?")))),(0,l.kt)("p",null,"The above is not meant to be an exact definition, but rather provide some guidelines.\nThe main point is that not all settings should be taken into account when generating the Seed filename."),(0,l.kt)("p",null,"To summarize, the following are inputs to the filename:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"u64 randomization starting point"),(0,l.kt)("li",{parentName:"ul"},"settings which impact your starting state (items, location, etc.)"),(0,l.kt)("li",{parentName:"ul"},"settings which impact the playthrough graph and fairness with regards to its traversal")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"If we want to be thorough, we should actually take the generated item placements into account (not just the input settings)."),(0,l.kt)("p",null,"The same randomization starting point and settings can still generate a different playthrough graph if any sort of small change ever happened with the item placement algorithm."),(0,l.kt)("p",null,"So we can take the item placements, and convert them all to a string and add it as an input.\nThat way, any change in item placement would generate a different filename.\nPut differently, we can be confident that the same filenames will have the same item placement without worrying about which version of the Generator was used."),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"generating-the-human-readable-part"},"Generating the human-readable part"),(0,l.kt)("p",null,"Essentially, we have this:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a bunch of inputs which can be converted to strings")),(0,l.kt)("p",null,"And we need a function with the following properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"takes all of the inputs and generates a representation that is a relatively small number of bits"),(0,l.kt)("li",{parentName:"ul"},"the same input must give the same output"),(0,l.kt)("li",{parentName:"ul"},"a small adjustment to the input should generate a different output (ideally much different)")),(0,l.kt)("p",null,"That sounds like a hash function."),(0,l.kt)("p",null,"So what we can do is take all of our inputs as strings, concatenate them, run a hash function on that string, and get a 32 bit result."),(0,l.kt)("p",null,"With 32 bits, the chance that we generate two Seeds with different inputs which end up with clashing filenames is approximately 1/(2^32) or 1 in 4,294,967,296 or 0.00000023283% which is negligible."),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"making-32-bits-human-readable"},"Making 32 bits human-readable"),(0,l.kt)("p",null,"Remember that we have 32 characters in the ",(0,l.kt)("inlineCode",{parentName:"p"},"DirectoryEntry")," filename to work with, and 6 of them are already being used on the ",(0,l.kt)("inlineCode",{parentName:"p"},"versionMajor")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"versionMinor"),".\nLet's say that we need 2 characters to establish the filename pattern."),(0,l.kt)("p",null,"This leaves us with 24 characters to represent 32 bits."),(0,l.kt)("p",null,"Let's first define our lower bound:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we can represent 32 bits in 6 characters.")),(0,l.kt)("p",null,"If we want to represent 32 bits using adjectives and nouns alone, we could split them evenly.\nWe would need 2^16 (65535) adjectives and 65535 nouns, which is obviously not going to work."),(0,l.kt)("p",null,"I will go ahead and say, the most nouns we will get (which is a power of 2) using proper nouns closely related to Twilight Princess is 128 (or 7 bits worth of data)."),(0,l.kt)("p",null,"So this means we need 2^25 or 33,554,432 adjectives.\nI don't think English has that many."),(0,l.kt)("p",null,"But what if we instead use the same 3 character pattern we used with the version numbers to cover for 16 of the bits."),(0,l.kt)("p",null,"In that case, with 7 bits of data covered by the noun, we only need 9 bits of data using adjectives.\nThis means we only need 512 adjectives, which is doable (I already did it. Did the nouns too. See the ",(0,l.kt)("inlineCode",{parentName:"p"},"Example Filename Generator")," back near the top)."),(0,l.kt)("hr",null),(0,l.kt)("p",null,"We have 24 characters in the filename to work with.\nIf we use 4 on the 3-char u16 and a delimiter, we have 20 characters for an adjective and noun."),(0,l.kt)("p",null,"It turns out that splitting this evenly (10 characters for each) gives us plenty of flexibility for picking adjectives and nouns."),(0,l.kt)("p",null,"To summarize, our human-readable part of the filename will look like:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Adjective (1 to 10 chars, 512 possibilities)"),(0,l.kt)("li",{parentName:"ul"},"Noun (1 to 10 chars, 128 possibilities)"),(0,l.kt)("li",{parentName:"ul"},"Delimiter (1 char)"),(0,l.kt)("li",{parentName:"ul"},"3-char u16 representation (3 chars, 65536 possibilities)")),(0,l.kt)("p",null,'And you would read it aloud like "Happy Zelda abc".'),(0,l.kt)("hr",null),(0,l.kt)("p",null,"I will go over briefly how I picked out the adjectives and nouns."),(0,l.kt)("h4",{id:"picking-out-adjectives"},"Picking out adjectives"),(0,l.kt)("p",null,"I looked up a list of 1000 adjectives, then did the following to reduce it to 512."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Removed any that had dashes"),(0,l.kt)("li",{parentName:"ul"},"Removed any that were more than 3 syllables long (according to me)"),(0,l.kt)("li",{parentName:"ul"},'Removed any which were too similar to others (for example, "magic" and "magical")'),(0,l.kt)("li",{parentName:"ul"},"Removed any that could be interpreted as having to do with topics which might be problematic such as religion, race, politics, sexuality, etc."),(0,l.kt)("li",{parentName:"ul"},"Finally, to get down to 512, manually removed any that I thought didn't roll off the tongue or didn't like")),(0,l.kt)("h4",{id:"picking-out-nouns"},"Picking out nouns"),(0,l.kt)("p",null,"The nouns come from the following categories:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"NPC names"),(0,l.kt)("li",{parentName:"ul"},"Enemy types (including Bosses and Midbosses)"),(0,l.kt)("li",{parentName:"ul"},"Golden Bug types (such as Phasmid)"),(0,l.kt)("li",{parentName:"ul"},"Fish species (such as Greengill)"),(0,l.kt)("li",{parentName:"ul"},"Items, especially if specific to TP (Spinner, etc.)"),(0,l.kt)("li",{parentName:"ul"},"A few manual picks")),(0,l.kt)("p",null,"with the following rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"10 characters max"),(0,l.kt)("li",{parentName:"ul"},'Titles are left off ("MayorBo" => "Bo", "DrBorville" => "Borville", etc.)'),(0,l.kt)("li",{parentName:"ul"},"3 syllables max (same as adjectives)"),(0,l.kt)("li",{parentName:"ul"},"None which are too similar",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Bulblin/Bullbo/Bubble, Purlo/Purdy, Argorok/Kargorok, Yeto/Yeta, Fyer/Fyrus, etc."))),(0,l.kt)("li",{parentName:"ul"},'None which are too difficult to read, including all which start with "I"',(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'For example, "MeaningfulIlia"')))),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Since the nouns and adjectives are all 3 syllables at most, reading the string out loud is usually pretty nice."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'On the shorter side, we have "ColdBo_J3u".'),(0,l.kt)("li",{parentName:"ul"},'On the longer side, we have "AnnualHylian_hE2".')),(0,l.kt)("p",null,"The chance of a collision using just the adjective and noun is still only 0.0015%, so most of the time you can probably ignore the 3-char part at the end.\nWe still want to keep it though, since it makes collisions almost impossible."),(0,l.kt)("hr",null),(0,l.kt)("p",null,'We haven\'t addressed it yet, but the filename pattern which indicates SeedData is "sd", which is short for "seed".\nThis is fine because the only normal Twilight Princess file starts with "gc", and the Randomizer GCI is named "Custom REL File".'),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You could use 3 characters instead of 2 by removing the delimiter from the filename in the GCI.\nThis would just make displaying the name to the user a little more involved.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},'If you had an experimental branch of the Rando which was using a completely different seed format, you could generate seeds which use a different pattern such as "se" for "seed experimental".\nOr if we ever had files which stored fully custom textures, they could have a different file pattern as well.')),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Here is the Example filename generator once again so you don't have to scroll back up."),(0,l.kt)(v,{mdxType:"SeedFilenameGeneratorDemo"}),(0,l.kt)("p",null,'Note that the "ge" part after the version number in the ',(0,l.kt)("inlineCode",{parentName:"p"},"osFilename")," is so someone can immediately tell which game a Seed file is targeting without viewing it in a hex editor."),(0,l.kt)("p",null,"The letters are the lowercase version of the first and last letters of the ",(0,l.kt)("inlineCode",{parentName:"p"},"gameCode"),' (such as "RZDE").\nThe first letter is the ',(0,l.kt)("inlineCode",{parentName:"p"},"SystemCode")," (which console) and the last letter is the ",(0,l.kt)("inlineCode",{parentName:"p"},"RegionCode"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The TprSeed and version number are put at the front so the files.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"You can immediately tell it is a Seed file."),(0,l.kt)("li",{parentName:"ul"},"They group together in a directory on your computer which is sorted alphabetically and which may contain other files."),(0,l.kt)("li",{parentName:"ul"},"If we add any other new Rando file types which also start with ",(0,l.kt)("inlineCode",{parentName:"li"},"Tpr"),", it kind of functions like a namespace (like ",(0,l.kt)("inlineCode",{parentName:"li"},"tpr::seed::etc..."),")."))),(0,l.kt)("li",{parentName:"ul"},"We use an underscore between the AdjectiveNoun and the 3-char part because double-clicking will select that whole part."),(0,l.kt)("li",{parentName:"ul"},"We use dashes between the other sections since we are using an underscore for the above purpose.\nIt also just makes it pretty easy to read imo."),(0,l.kt)("li",{parentName:"ul"},"We use two dashes before the AdjectiveNoun part because the adjective is the part that we want the player's eye to go to first.\nIt does not stick out as much with only one dash:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TprSeed-v17.3ge--DreadfulCheese_4tp.gci")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TprSeed-v17.3ge-DreadfulCheese_4tp.gci")),(0,l.kt)("li",{parentName:"ul"},"Everything kind of blends together with only one dash imo.")))),(0,l.kt)("h2",{id:"image-and-debug-info"},"Image and debug info"),(0,l.kt)("p",null,"This article is already long enough, so I will be brief here."),(0,l.kt)("h3",{id:"image-data"},"Image data"),(0,l.kt)("p",null,"The user should be able to choose to leave the image data out of their Seed data.\nFor people playing on actual hardware, every block can count, and people should be able to opt out of spending an additional (1 ","*"," numSeedFilesOnMemCard) blocks on a bunch of copies of the same images.\nYou could potentially have 3 options for this: always include the images, never include, or only include if it would not increase the block size."),(0,l.kt)("p",null,"Structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the comments should be put at offset 0x0 since they are mandatory and they must not be split across block boundaries."),(0,l.kt)("li",{parentName:"ul"},"The actual seed data will start at offset 0x40.\nThis is a hardcoded value."),(0,l.kt)("li",{parentName:"ul"},"You can tell the length of the seed data by checking the image offset information in the ",(0,l.kt)("inlineCode",{parentName:"li"},"DirectoryEntry"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If there are no images, the seed data length which should be copied from the memory card is from offset 0x40 until the end of the last block.")))),(0,l.kt)("h3",{id:"debug-info"},"Debug info"),(0,l.kt)("p",null,"At the very end of the file after the image data, I would recommend putting the following information such that you can easily read it in a hex editor:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"timestamp for when the seed was created",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'easy to read version using ascii characters like "2022/07/21..."'))),(0,l.kt)("li",{parentName:"ul"},"u64 randomization starting point",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"This is debug info which does not need to be in the seed header as far as I can tell."))),(0,l.kt)("li",{parentName:"ul"},"settings string (you will need to specify its length as well)"),(0,l.kt)("li",{parentName:"ul"},"Generator version?"),(0,l.kt)("li",{parentName:"ul"},"whatever else you want")),(0,l.kt)("p",null,"This part will be read into RAM if there is no image data, but it is not a big deal as long as the size is small.\nPerhaps you let people opt out of this too."))}R.isMDXComponent=!0}}]);